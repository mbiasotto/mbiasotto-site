#!/bin/bash

# üì± Script de Teste de Performance Mobile
# Uso: ./test-mobile-performance.sh [URL_DO_SITE]

echo "üöÄ ===== TESTE DE PERFORMANCE MOBILE ===== üöÄ"
echo ""

# Definir URL (usar argumento ou padr√£o)
if [ -z "$1" ]; then
    echo "‚ö†Ô∏è  Por favor, forne√ßa a URL do site:"
    echo "   ./test-mobile-performance.sh https://seusite.com"
    exit 1
fi

URL="$1"
echo "üîç Testando: $URL"
echo "üì± Plataforma: Mobile"
echo ""

# Verificar se curl e jq est√£o instalados
if ! command -v curl &> /dev/null; then
    echo "‚ùå curl n√£o encontrado. Instale: brew install curl"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "‚ùå jq n√£o encontrado. Instale: brew install jq"
    exit 1
fi

echo "‚è≥ Executando teste Google PageSpeed Insights..."
echo ""

# Fazer requisi√ß√£o para PageSpeed Insights API
RESPONSE=$(curl -s "https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${URL}&category=performance&strategy=mobile")

# Verificar se a resposta √© v√°lida
if [ $? -ne 0 ]; then
    echo "‚ùå Erro ao fazer requisi√ß√£o para PageSpeed Insights"
    exit 1
fi

# Verificar se h√° erro na API
ERROR=$(echo "$RESPONSE" | jq -r '.error.message // empty')
if [ ! -z "$ERROR" ]; then
    echo "‚ùå Erro da API: $ERROR"
    exit 1
fi

echo "üìä ===== RESULTADOS DE PERFORMANCE MOBILE ====="
echo ""

# Performance Score
SCORE=$(echo "$RESPONSE" | jq -r '.lighthouseResult.categories.performance.score * 100')
echo "üéØ Performance Score: ${SCORE}/100"

# Core Web Vitals
echo ""
echo "üìà ===== CORE WEB VITALS ====="

# LCP
LCP=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["largest-contentful-paint"].displayValue // "N/A"')
LCP_SCORE=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["largest-contentful-paint"].score // 0')
if (( $(echo "$LCP_SCORE < 0.5" | bc -l) )); then
    LCP_STATUS="‚ùå RUIM"
elif (( $(echo "$LCP_SCORE < 0.9" | bc -l) )); then
    LCP_STATUS="‚ö†Ô∏è  PRECISA MELHORAR"
else
    LCP_STATUS="‚úÖ BOM"
fi
echo "‚Ä¢ LCP (Largest Contentful Paint): $LCP $LCP_STATUS"

# FID/TBT (Total Blocking Time √© usado como proxy)
TBT=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["total-blocking-time"].displayValue // "N/A"')
TBT_SCORE=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["total-blocking-time"].score // 0')
if (( $(echo "$TBT_SCORE < 0.5" | bc -l) )); then
    TBT_STATUS="‚ùå RUIM"
elif (( $(echo "$TBT_SCORE < 0.9" | bc -l) )); then
    TBT_STATUS="‚ö†Ô∏è  PRECISA MELHORAR"
else
    TBT_STATUS="‚úÖ BOM"
fi
echo "‚Ä¢ TBT (Total Blocking Time): $TBT $TBT_STATUS"

# CLS
CLS=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["cumulative-layout-shift"].displayValue // "N/A"')
CLS_SCORE=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["cumulative-layout-shift"].score // 0')
if (( $(echo "$CLS_SCORE < 0.5" | bc -l) )); then
    CLS_STATUS="‚ùå RUIM"
elif (( $(echo "$CLS_SCORE < 0.9" | bc -l) )); then
    CLS_STATUS="‚ö†Ô∏è  PRECISA MELHORAR"
else
    CLS_STATUS="‚úÖ BOM"
fi
echo "‚Ä¢ CLS (Cumulative Layout Shift): $CLS $CLS_STATUS"

echo ""
echo "‚ö° ===== M√âTRICAS ADICIONAIS ====="

# FCP
FCP=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["first-contentful-paint"].displayValue // "N/A"')
echo "‚Ä¢ FCP (First Contentful Paint): $FCP"

# Speed Index
SI=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["speed-index"].displayValue // "N/A"')
echo "‚Ä¢ Speed Index: $SI"

echo ""
echo "üîß ===== PRINCIPAIS PROBLEMAS ENCONTRADOS ====="

# Oportunidades de melhoria
OPPORTUNITIES=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits | to_entries[] | select(.value.scoreDisplayMode == "numeric" and .value.score < 0.9) | .value.title' | head -5)

if [ ! -z "$OPPORTUNITIES" ]; then
    echo "$OPPORTUNITIES" | while read -r line; do
        echo "‚Ä¢ $line"
    done
else
    echo "‚úÖ Nenhum problema cr√≠tico encontrado!"
fi

echo ""
echo "üìã ===== RECOMENDA√á√ïES R√ÅPIDAS ====="

# Verificar problemas espec√≠ficos
RENDER_BLOCKING=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["render-blocking-resources"].score // 1')
if (( $(echo "$RENDER_BLOCKING < 0.9" | bc -l) )); then
    echo "üö® CR√çTICO: Eliminar recursos que bloqueiam renderiza√ß√£o"
fi

UNUSED_CSS=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["unused-css-rules"].score // 1')
if (( $(echo "$UNUSED_CSS < 0.9" | bc -l) )); then
    echo "‚ö†Ô∏è  Remover CSS n√£o utilizado"
fi

LARGE_JS=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["unminified-javascript"].score // 1')
if (( $(echo "$LARGE_JS < 0.9" | bc -l) )); then
    echo "‚ö†Ô∏è  Minificar JavaScript"
fi

IMAGES=$(echo "$RESPONSE" | jq -r '.lighthouseResult.audits["modern-image-formats"].score // 1')
if (( $(echo "$IMAGES < 0.9" | bc -l) )); then
    echo "üñºÔ∏è  Usar formatos de imagem modernos (WebP)"
fi

echo ""
echo "üéØ ===== PR√ìXIMOS PASSOS ====="
echo "1. üìä Ver relat√≥rio detalhado: https://pagespeed.web.dev/analysis?url=${URL}"
echo "2. üìã Seguir plano: mobile-optimization-plan.md"
echo "3. üîÑ Executar teste novamente ap√≥s otimiza√ß√µes"
echo ""

# Interpreta√ß√£o do Score
if (( $(echo "$SCORE >= 90" | bc -l) )); then
    echo "üéâ EXCELENTE! Site com √≥tima performance mobile"
elif (( $(echo "$SCORE >= 70" | bc -l) )); then
    echo "üëç BOM! Algumas otimiza√ß√µes podem melhorar ainda mais"
elif (( $(echo "$SCORE >= 50" | bc -l) )); then
    echo "‚ö†Ô∏è  M√âDIO! Otimiza√ß√µes s√£o necess√°rias para melhor UX"
else
    echo "üö® CR√çTICO! Performance mobile precisa de aten√ß√£o urgente"
    echo "   üí° Sugest√£o: Implemente primeiro as corre√ß√µes em mobile-optimization-plan.md"
fi

echo ""
echo "‚úÖ Teste conclu√≠do em $(date)"
echo "==================================================" 